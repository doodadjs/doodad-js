//! BEGIN_MODULE()

//! REPLACE_BY("// Copyright 2015-2018 Claude Petit, licensed under Apache License version 2.0\n", true)
// doodad-js - Object-oriented programming framework
// File: Unit_Types_Is.js - Unit testing module file
// Project home: https://github.com/doodadjs/
// Author: Claude Petit, Quebec city
// Contact: doodadjs [at] gmail.com
// Note: I'm still in alpha-beta stage, so expect to find some bugs or incomplete parts !
// License: Apache V2
//
//	Copyright 2015-2018 Claude Petit
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//		http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.
//! END_REPLACE()

//! IF_SET("mjs")
//! ELSE()
	"use strict";
//! END_IF()

exports.add = function add(mods) {
	mods = (mods || {});
	mods['Doodad.Test.Types.Is'] = {
		type: 'TestModule',
		version: /*! REPLACE_BY(TO_SOURCE(VERSION(MANIFEST("name")))) */ null /*! END_REPLACE()*/,
		dependencies: ['Doodad.Test.Types'],

		// Unit
		priority: null,

		proto: {
			run: function run(root, /*optional*/options) {
				const doodad = root.Doodad,
					types = doodad.Types,
					tools = doodad.Tools,
					namespaces = doodad.Namespaces,
					test = doodad.Test,
					unit = test.Types.Is,
					io = doodad.IO,
					client = doodad.Client;

						
				if (!options) {
					options = {};
				};
					
				
				const __Internal__ = {
				};

				__Internal__.a = [];
				__Internal__.a.property = 1;
					
				__Internal__.b = new Number(0);
				__Internal__.b.property = 2;
					
				__Internal__.c = [1];
				delete __Internal__.c[0];
					
				__Internal__.textNode = global.document && document.createTextNode("Hello World");
					
				__Internal__.d = tools.createObject(null);

				__Internal__.symbol = types.hasSymbolsEnabled() && types.getSymbol("symbol") || undefined;


				test.runCommand(types.isNothing, "Doodad.Types.isNothing", function(command, options) {
					command.runStep(true, {repetitions: 100},        /**/ undefined);
					command.runStep(true, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/ '');
					command.runStep(false, {repetitions: 100},        /**/ ' ');
					command.runStep(false, {repetitions: 100},        /**/ 'a');
					command.runStep(false, {repetitions: 100},        /**/ '1');
					command.runStep(false, {repetitions: 100},        /**/ 0);
					command.runStep(false, {repetitions: 100},        /**/ 1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/ {});
					command.runStep(false, {repetitions: 100},        /**/ {a: 1});
					command.runStep(false, {repetitions: 100},        /**/ []);
					command.runStep(false, {repetitions: 100},        /**/ [1]);
					command.runStep(false, {repetitions: 100},        /**/ new String(''));
					command.runStep(false, {repetitions: 100},        /**/ new String(' '));
					command.runStep(false, {repetitions: 100},        /**/ new String('a'));
					command.runStep(false, {repetitions: 100},        /**/ new String('1'));
					command.runStep(false, {repetitions: 100},        /**/ new Number(0));
					command.runStep(false, {repetitions: 100},        /**/ new Number(1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});

				test.runCommand(types.isPrimitive, "Doodad.Types.isPrimitive", function(command, options) {
					command.runStep(true, {repetitions: 100},        /**/ undefined);
					command.runStep(true, {repetitions: 100},        /**/ null);
					command.runStep(true, {repetitions: 100},        /**/ '');
					command.runStep(true, {repetitions: 100},        /**/ ' ');
					command.runStep(true, {repetitions: 100},        /**/ 'a');
					command.runStep(true, {repetitions: 100},        /**/ '1');
					command.runStep(true, {repetitions: 100},        /**/ 0);
					command.runStep(true, {repetitions: 100},        /**/ 1);
					command.runStep(true, {repetitions: 100},        /**/ 0.1);
					command.runStep(true, {repetitions: 100},        /**/ NaN);
					command.runStep(true, {repetitions: 100},        /**/ Infinity);
					command.runStep(true, {repetitions: 100},        /**/ true);
					command.runStep(true, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.d);
					command.runStep(true, {repetitions: 100, skip: !__Internal__.symbol},         /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isNumber, "Doodad.Types.isNumber", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(true, {repetitions: 100},        /**/ 0);
					command.runStep(true, {repetitions: 100},        /**/ 1);
					command.runStep(true, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(true, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(true, {repetitions: 100},        /**/ new Number(0));
					command.runStep(true, {repetitions: 100},        /**/ new Number(1));
					command.runStep(true, {repetitions: 100},        /**/ new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(true, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(true, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});

				test.runCommand(types.isInteger, "Doodad.Types.isInteger", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(true, {repetitions: 100},        /**/ 0);
					command.runStep(true, {repetitions: 100},        /**/ 1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(true, {repetitions: 100},        /**/ new Number(0));
					command.runStep(true, {repetitions: 100},        /**/ new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(true, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});

				test.runCommand(types.isBoolean, "Doodad.Types.isBoolean", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(true, {repetitions: 100},        /**/ true);
					command.runStep(true, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(true, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isInfinite, "Doodad.Types.isInfinite", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(true, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(true, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isFloat, "Doodad.Types.isFloat", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(true,  {repetitions: 100},        /**/0);
					command.runStep(true,  {repetitions: 100},        /**/1);
					command.runStep(true,  {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(true,  {repetitions: 100},        /**/new Number(0));
					command.runStep(true,  {repetitions: 100},        /**/new Number(1));
					command.runStep(true, {repetitions: 100},        /**/ new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(true,  {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isString, "Doodad.Types.isString", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(true, {repetitions: 100},        /**/ '');
					command.runStep(true, {repetitions: 100},        /**/ ' ');
					command.runStep(true, {repetitions: 100},        /**/ 'a');
					command.runStep(true, {repetitions: 100},        /**/ '1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(true, {repetitions: 100},        /**/ new String(''));
					command.runStep(true, {repetitions: 100},        /**/ new String(' '));
					command.runStep(true, {repetitions: 100},        /**/ new String('a'));
					command.runStep(true, {repetitions: 100},        /**/ new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isDate, "Doodad.Types.isDate", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(true, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isArray, "Doodad.Types.isArray", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(true, {repetitions: 100},        /**/ []);
					command.runStep(true, {repetitions: 100},        /**/ [1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(true, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(true, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isArrayAndNotEmpty, "Doodad.Types.isArrayAndNotEmpty", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(true, {repetitions: 100},        /**/ [1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isArrayLike, "Doodad.Types.isArrayLike", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(true, {repetitions: 100},        /**/ '');
					command.runStep(true, {repetitions: 100},        /**/ ' ');
					command.runStep(true, {repetitions: 100},        /**/ 'a');
					command.runStep(true, {repetitions: 100},        /**/ '1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(true, {repetitions: 100},        /**/ []);
					command.runStep(true, {repetitions: 100},        /**/ [1]);
					command.runStep(true, {repetitions: 100},        /**/ new String(''));
					command.runStep(true, {repetitions: 100},        /**/ new String(' '));
					command.runStep(true, {repetitions: 100},        /**/ new String('a'));
					command.runStep(true, {repetitions: 100},        /**/ new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(true, {eval: true, repetitions: 100, skip: !global.document, note: "May fail under Safari because 'document.forms' is a special function."},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(true, {repetitions: 100},         /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(true, {repetitions: 100},         /**/ __Internal__.c);
					command.runStep(true, {repetitions: 100},         /**/ {length: 3});
					command.runStep(false, {repetitions: 100},        /**/ {length: 3.1});
					command.runStep(false, {repetitions: 100},        /**/ {length: -3});
					command.runStep(false, {repetitions: 100},        /**/ {length: NaN});
					command.runStep(false, {repetitions: 100},        /**/ {length: Infinity});
					command.runStep(false, {repetitions: 100},        /**/ {length: -Infinity});
					command.runStep(false, {repetitions: 100},        /**/ {length: null});
					command.runStep(false, {repetitions: 100},        /**/ {length: {}});
					command.runStep(false, {repetitions: 100},        /**/ {length: []});
					command.runStep(false, {repetitions: 100},        /**/ {length: ''});
					command.runStep(false, {repetitions: 100},        /**/ {length: '3'});
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isArrayLikeAndNotEmpty, "Doodad.Types.isArrayLikeAndNotEmpty", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(true, {repetitions: 100},        /**/ ' ');
					command.runStep(true, {repetitions: 100},        /**/ 'a');
					command.runStep(true, {repetitions: 100},        /**/ '1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(true, {repetitions: 100},        /**/ [1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(true, {repetitions: 100},        /**/ new String(' '));
					command.runStep(true, {repetitions: 100},        /**/ new String('a'));
					command.runStep(true, {repetitions: 100},        /**/ new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep("document.forms.length > 0", {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isObject, "Doodad.Types.isObject", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(true, {repetitions: 100},        /**/ {});
					command.runStep(true, {repetitions: 100},        /**/ {a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(true,  {repetitions: 100},        /**/ __Internal__.d);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},         /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isObjectLike, "Doodad.Types.isObjectLike", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(true, {repetitions: 100},        /**/ {});
					command.runStep(true, {repetitions: 100},        /**/ {a: 1});
					command.runStep(true, {repetitions: 100},        /**/ []);
					command.runStep(true, {repetitions: 100},        /**/ [1]);
					command.runStep(true, {repetitions: 100},        /**/ new String(''));
					command.runStep(true, {repetitions: 100},        /**/ new String(' '));
					command.runStep(true, {repetitions: 100},        /**/ new String('a'));
					command.runStep(true, {repetitions: 100},        /**/ new String('1'));
					command.runStep(true, {repetitions: 100},        /**/ new Number(0));
					command.runStep(true, {repetitions: 100},        /**/ new Number(1));
					command.runStep(true, {repetitions: 100},        /**/ new Number(0.1));
					command.runStep(true, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(true, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(true, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(true, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(true, {repetitions: 100},        /**/ new Date);
					command.runStep(true, {repetitions: 100},        /**/ new Error);
					command.runStep(true, {repetitions: 100},        /**/ (function(){}));
					command.runStep(true, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(true, {repetitions: 100},        /**/ Object);
					command.runStep(true, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(true, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(true, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(true, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(true, {repetitions: 100},        /**/ __Internal__.d);
					global.symbol && command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isFunction, "Doodad.Types.isFunction", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document, note: "May fail under Safari because 'document.forms' is a special function."},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(true, {repetitions: 100},         /**/ (function(){}));
					command.runStep(true, {repetitions: 100},         /**/ Object.prototype.toString);
					command.runStep(true, {repetitions: 100},         /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isNativeFunction, "Doodad.Types.isNativeFunction", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document, note: "May fail under Safari because 'document.forms' is a special function."},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(true, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(true, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isCustomFunction, "Doodad.Types.isCustomFunction", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document, note: "May fail under Safari because 'document.forms' is a special function."},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(true, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isNaN, "Doodad.Types.isNaN", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(true, {repetitions: 100},         /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(true,  {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isError, "Doodad.Types.isError", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(true, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});

				test.runCommand(client && client.isWindow, "Doodad.Client.isWindow", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
					command.runStep(true, {repetitions: 100},                     /**/ global);
					command.runStep(false, {eval: true, repetitions: 100},        /**/ "document");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.textNode);
				}, {skip: !global.document});
					
				test.runCommand(client && client.isDocument, "Doodad.Client.isDocument", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
					command.runStep(false, {repetitions: 100},                    /**/global);
					command.runStep(true, {eval: true, repetitions: 100},         /**/ "document");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.textNode);
				}, {skip: !global.document});
					
				test.runCommand(client && client.isNode, "Doodad.Client.isNode", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(true, {eval: true, repetitions: 100},         /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
					command.runStep(false, {repetitions: 100},                    /**/global);
					command.runStep(true, {eval: true, repetitions: 100},         /**/ "document");
					command.runStep(true, {repetitions: 100},         /**/ __Internal__.textNode);
				}, {skip: !global.document});
					
				test.runCommand(client && client.isElement, "Doodad.Client.isElement", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(true,  {eval: true, repetitions: 100},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
					command.runStep(false, {repetitions: 100},                    /**/global);
					command.runStep(false, {eval: true, repetitions: 100},        /**/ "document");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.textNode);
				}, {skip: !global.document});
					
				test.runCommand(types.isNothingOrEmpty, "Doodad.Types.isNothingOrEmpty", function(command, options) {
					command.runStep(true, {repetitions: 100},        /**/ undefined);
					command.runStep(true, {repetitions: 100},        /**/ null);
					command.runStep(true, {repetitions: 100},        /**/ '');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(true, {repetitions: 100},        /**/ {});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(true, {repetitions: 100},        /**/ []);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(true, {repetitions: 100},        /**/ new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(true, {repetitions: 100},        /**/ new Number(0));
					command.runStep(true, {repetitions: 100},        /**/ new Number(1));
					command.runStep(true, {repetitions: 100},        /**/ new Number(0.1));
					command.runStep(true, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(true, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(true, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep("document.forms.length === 0", {eval: true, repetitions: 100, skip: !global.document, note: "May fail under Safari because 'document.forms' is not an array-like object and property 'length' is an own property."},        /**/ "document.forms");
					command.runStep(true, {repetitions: 100},        /**/ new Date);
					command.runStep(true, {repetitions: 100, note: "May fail under MS Internet Explorer because properties 'number' and 'description' are own properties."},        /**/ new Error);
					command.runStep(true, {repetitions: 100},        /**/ (function(){}));
					command.runStep(true, {repetitions: 100},        /**/ Object.prototype.toString);
					//command.runStep(true, {repetitions: 100},        /**/ Object);
					command.runStep(true, {eval: true, repetitions: 100, skip: !global.document, note: "May fail under Chrome, Opera and Safari because properties are owned properties."},        /**/ "document.body");
					command.runStep(true, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(true, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isEmpty, "Doodad.Types.isEmpty", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(true, {repetitions: 100},        /**/ '');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(true, {repetitions: 100},        /**/ {});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(true, {repetitions: 100},        /**/ []);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(true, {repetitions: 100},        /**/ new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(true, {repetitions: 100},        /**/ new Number(0));
					command.runStep(true, {repetitions: 100},        /**/ new Number(1));
					command.runStep(true, {repetitions: 100},        /**/ new Number(0.1));
					command.runStep(true, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(true, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(true, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep("document.forms.length === 0", {eval: true, repetitions: 100, skip: !global.document, note: "May fail under Safari because 'document.forms' is not an array-like object and property 'length' is an own property."},        /**/ "document.forms");
					command.runStep(true, {repetitions: 100},        /**/ new Date);
					command.runStep(true, {repetitions: 100, note: "May fail under MS Internet Explorer because properties 'number' and 'description' are own properties."},        /**/ new Error);
					command.runStep(true, {repetitions: 100},        /**/ (function(){}));
					command.runStep(true, {repetitions: 100},        /**/ Object.prototype.toString);
					//command.runStep(true, {repetitions: 100},        /**/ Object);
					command.runStep(true, {eval: true, repetitions: 100, skip: !global.document, note: "May fail under Chrome, Opera and Safari because properties are owned properties."},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},       /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},       /**/ __Internal__.b);
					command.runStep(true, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isStringAndNotEmpty, "Doodad.Types.isStringAndNotEmpty", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(true, {repetitions: 100},        /**/ ' ');
					command.runStep(true, {repetitions: 100},        /**/ 'a');
					command.runStep(true, {repetitions: 100},        /**/ '1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(true, {repetitions: 100},        /**/ new String(' '));
					command.runStep(true, {repetitions: 100},        /**/ new String('a'));
					command.runStep(true, {repetitions: 100},        /**/ new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isStringAndNotEmptyTrim, "Doodad.Types.isStringAndNotEmptyTrim", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(true, {repetitions: 100},        /**/ 'a');
					command.runStep(true, {repetitions: 100},        /**/ '1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/{a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(true, {repetitions: 100},        /**/ new String('a'));
					command.runStep(true, {repetitions: 100},        /**/ new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isObjectAndNotEmpty, "Doodad.Types.isObjectAndNotEmpty", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(true, {repetitions: 100},        /**/ {a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isObjectLikeAndNotEmpty, "Doodad.Types.isObjectLikeAndNotEmpty", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/'');
					command.runStep(false, {repetitions: 100},        /**/' ');
					command.runStep(false, {repetitions: 100},        /**/'a');
					command.runStep(false, {repetitions: 100},        /**/'1');
					command.runStep(false, {repetitions: 100},        /**/0);
					command.runStep(false, {repetitions: 100},        /**/1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(true, {repetitions: 100},        /**/ {a: 1});
					command.runStep(false, {repetitions: 100},        /**/[]);
					command.runStep(false, {repetitions: 100},        /**/[1]);
					command.runStep(false, {repetitions: 100},        /**/new String(''));
					command.runStep(false, {repetitions: 100},        /**/new String(' '));
					command.runStep(false, {repetitions: 100},        /**/new String('a'));
					command.runStep(false, {repetitions: 100},        /**/new String('1'));
					command.runStep(false, {repetitions: 100},        /**/new Number(0));
					command.runStep(false, {repetitions: 100},        /**/new Number(1));
					command.runStep(false, {repetitions: 100},        /**/new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					//command.runStep(false, {eval: true, repetitions: 100, skip: !global.document, note: "May fail under most browsers because 'length' is an own property."},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100, note: "May fail under MS Internet Explorer because properties 'number' and 'description' are own properties."},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					//command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document, note: "May fail under Chrome, Opera and Safari because properties are owned properties."},        /**/ "document.body");
					command.runStep(true, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(true, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
				
				
				__Internal__.hasIter = false;
				try {
					__Internal__.hasIter = types.isSymbol(global.Symbol ? global.Symbol.iterator : undefined);
				} catch(ex) {
				};
					
				__Internal__.hasGen = false;
				try {
					tools.eval("function*(){}");
					__Internal__.hasGen = true;
				} catch(ex) {
				};
				
				
				
				test.runCommand(types.isIterable, "Doodad.Types.isIterable", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/ undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(__Internal__.hasIter, {repetitions: 100},      /**/ '');
					command.runStep(__Internal__.hasIter, {repetitions: 100},      /**/ ' ');
					command.runStep(__Internal__.hasIter, {repetitions: 100},      /**/ 'a');
					command.runStep(__Internal__.hasIter, {repetitions: 100},      /**/ '1');
					command.runStep(false, {repetitions: 100},        /**/ 0);
					command.runStep(false, {repetitions: 100},        /**/ 1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/ {});
					command.runStep(false, {repetitions: 100},        /**/ {a: 1});
					command.runStep(__Internal__.hasIter, {repetitions: 100},      /**/ []);
					command.runStep(__Internal__.hasIter, {repetitions: 100},      /**/ [1]);
					command.runStep(__Internal__.hasIter, {repetitions: 100},      /**/ new String(''));
					command.runStep(__Internal__.hasIter, {repetitions: 100},      /**/ new String(' '));
					command.runStep(__Internal__.hasIter, {repetitions: 100},      /**/ new String('a'));
					command.runStep(__Internal__.hasIter, {repetitions: 100},      /**/ new String('1'));
					command.runStep(false, {repetitions: 100},        /**/ new Number(0));
					command.runStep(false, {repetitions: 100},        /**/ new Number(1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					//global.document && command.runStep(false, {eval: true, repetitions: 100},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {eval: true, repetitions: 100, skip: !__Internal__.hasGen},                 /**/ "(function*(){})");
					command.runStep(__Internal__.hasIter, {eval: true, repetitions: 100, skip: !__Internal__.hasGen},                 /**/ "(function*(){})()");
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(__Internal__.hasIter, {repetitions: 100},      /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(__Internal__.hasIter, {repetitions: 100},      /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
					
				test.runCommand(types.isIteratorLike, "Doodad.Types.isIteratorLike", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/ undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/ '');
					command.runStep(false, {repetitions: 100},        /**/ ' ');
					command.runStep(false, {repetitions: 100},        /**/ 'a');
					command.runStep(false, {repetitions: 100},        /**/ '1');
					command.runStep(false, {repetitions: 100},        /**/ 0);
					command.runStep(false, {repetitions: 100},        /**/ 1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/ {a: 1});
					command.runStep(false, {repetitions: 100},        /**/ []);
					command.runStep(false, {repetitions: 100},        /**/ [1]);
					command.runStep(false, {repetitions: 100},        /**/ new String(''));
					command.runStep(false, {repetitions: 100},        /**/ new String(' '));
					command.runStep(false, {repetitions: 100},        /**/ new String('a'));
					command.runStep(false, {repetitions: 100},        /**/ new String('1'));
					command.runStep(false, {repetitions: 100},        /**/ new Number(0));
					command.runStep(false, {repetitions: 100},        /**/ new Number(1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					//command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {eval: true, repetitions: 100, skip: !__Internal__.hasGen},        /**/ "(function*(){})");
					command.runStep(__Internal__.hasIter, {eval: true, repetitions: 100, skip: !__Internal__.hasGen},      /**/ "(function*(){})()");
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					

				test.runCommand(types.isGeneratorFunction, "Doodad.Types.isGeneratorFunction", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/ undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/ '');
					command.runStep(false, {repetitions: 100},        /**/ ' ');
					command.runStep(false, {repetitions: 100},        /**/ 'a');
					command.runStep(false, {repetitions: 100},        /**/ '1');
					command.runStep(false, {repetitions: 100},        /**/ 0);
					command.runStep(false, {repetitions: 100},        /**/ 1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/ {});
					command.runStep(false, {repetitions: 100},        /**/ {a: 1});
					command.runStep(false, {repetitions: 100},        /**/ []);
					command.runStep(false, {repetitions: 100},        /**/ [1]);
					command.runStep(false, {repetitions: 100},        /**/ new String(''));
					command.runStep(false, {repetitions: 100},        /**/ new String(' '));
					command.runStep(false, {repetitions: 100},        /**/ new String('a'));
					command.runStep(false, {repetitions: 100},        /**/ new String('1'));
					command.runStep(false, {repetitions: 100},        /**/ new Number(0));
					command.runStep(false, {repetitions: 100},        /**/ new Number(1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					//command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(true,  {eval: true, repetitions: 100, skip: !__Internal__.hasGen},        /**/ "(function*(){})");
					command.runStep(false, {eval: true, repetitions: 100, skip: !__Internal__.hasGen},        /**/ "(function*(){})()");
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
					
				test.runCommand(types.isGenerator, "Doodad.Types.isGenerator", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/ undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/ '');
					command.runStep(false, {repetitions: 100},        /**/ ' ');
					command.runStep(false, {repetitions: 100},        /**/ 'a');
					command.runStep(false, {repetitions: 100},        /**/ '1');
					command.runStep(false, {repetitions: 100},        /**/ 0);
					command.runStep(false, {repetitions: 100},        /**/ 1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/ {a: 1});
					command.runStep(false, {repetitions: 100},        /**/ []);
					command.runStep(false, {repetitions: 100},        /**/ [1]);
					command.runStep(false, {repetitions: 100},        /**/ new String(''));
					command.runStep(false, {repetitions: 100},        /**/ new String(' '));
					command.runStep(false, {repetitions: 100},        /**/ new String('a'));
					command.runStep(false, {repetitions: 100},        /**/ new String('1'));
					command.runStep(false, {repetitions: 100},        /**/ new Number(0));
					command.runStep(false, {repetitions: 100},        /**/ new Number(1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					//command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {eval: true, repetitions: 100, skip: !__Internal__.hasGen},        /**/ "(function*(){})");
					command.runStep(true,  {eval: true, repetitions: 100, skip: !__Internal__.hasGen},        /**/ "(function*(){})()");
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(false, {repetitions: 100, skip: !__Internal__.symbol},        /**/ __Internal__.symbol);
				});
					
				test.runCommand(types.isSymbol, "Doodad.Types.isSymbol", function(command, options) {
					command.runStep(false, {repetitions: 100},        /**/ undefined);
					command.runStep(false, {repetitions: 100},        /**/ null);
					command.runStep(false, {repetitions: 100},        /**/ '');
					command.runStep(false, {repetitions: 100},        /**/ ' ');
					command.runStep(false, {repetitions: 100},        /**/ 'a');
					command.runStep(false, {repetitions: 100},        /**/ '1');
					command.runStep(false, {repetitions: 100},        /**/ 0);
					command.runStep(false, {repetitions: 100},        /**/ 1);
					command.runStep(false, {repetitions: 100},        /**/ 0.1);
					command.runStep(false, {repetitions: 100},        /**/ NaN);
					command.runStep(false, {repetitions: 100},        /**/ Infinity);
					command.runStep(false, {repetitions: 100},        /**/ true);
					command.runStep(false, {repetitions: 100},        /**/ false);
					command.runStep(false, {repetitions: 100},        /**/{});
					command.runStep(false, {repetitions: 100},        /**/ {a: 1});
					command.runStep(false, {repetitions: 100},        /**/ []);
					command.runStep(false, {repetitions: 100},        /**/ [1]);
					command.runStep(false, {repetitions: 100},        /**/ new String(''));
					command.runStep(false, {repetitions: 100},        /**/ new String(' '));
					command.runStep(false, {repetitions: 100},        /**/ new String('a'));
					command.runStep(false, {repetitions: 100},        /**/ new String('1'));
					command.runStep(false, {repetitions: 100},        /**/ new Number(0));
					command.runStep(false, {repetitions: 100},        /**/ new Number(1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(0.1));
					command.runStep(false, {repetitions: 100},        /**/ new Number(NaN));
					command.runStep(false, {repetitions: 100},        /**/ new Number(Infinity));
					command.runStep(false, {repetitions: 100},        /**/ new Boolean(false));
					//command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.forms");
					command.runStep(false, {repetitions: 100},        /**/ new Date);
					command.runStep(false, {repetitions: 100},        /**/ new Error);
					command.runStep(false, {repetitions: 100},        /**/ (function(){}));
					command.runStep(false, {eval: true, repetitions: 100, skip: !__Internal__.hasGen},        /**/ "(function*(){})");
					command.runStep(false, {eval: true, repetitions: 100, skip: !__Internal__.hasGen},        /**/ "(function*(){})()");
					command.runStep(false, {repetitions: 100},        /**/ Object.prototype.toString);
					command.runStep(false, {repetitions: 100},        /**/ Object);
					command.runStep(false, {eval: true, repetitions: 100, skip: !global.document},        /**/ "document.body");
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.a);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.b);
					command.runStep(false, {repetitions: 100},        /**/ __Internal__.c);
					command.runStep(true, {repetitions: 100, skip: !__Internal__.symbol},         /**/ __Internal__.symbol);
				});
						
			},
		},
	};
	return mods;
};

//! END_MODULE()
