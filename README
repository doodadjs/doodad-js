Fast object-oriented programming framework for Javascript and Node-Js.

[![NPM Version][npm-image]][npm-url]
 
<<<< PLEASE UPGRADE TO THE LATEST VERSION AS OFTEN AS POSSIBLE >>>>

## Installation

```bash
$ npm install doodad-js
```

## Features

  -  Classes
  -  Inheritance
  -  Interfaces (and Mix-ins and Traits)
  -  Class extenders
  -  Method and attribute scopes (public, protected and private)
  -  Base classes and interfaces
  -  Custom events management
  -  DOM events management
  -  NodeJs events management
  -  Exceptions
  -  Singletons
  -  Polymorphism
  -  Static classes
  -  Useful utility functions
  -  Namespaces and a registry
  -  Compatible with most recent browsers and NodeJs.
  -  Compatible with Windows, Linux and MacOS X.
  -  Supports browserify.

## Quick Start

By default, Doodad is running in production mode, which disables every validations. You may want to activate the development mode by setting the "NODE_ENV" environment variable :

Windows :
```dos
    set NODE_ENV=development
```
Linux :
```bash
    export NODE_ENV=development
```
Now create the root namespace :
```js
    const root = require('doodad-js').createRoot();
```

You can create a shortcut to the namespaces this way :
```js
    const doodad = root.Doodad,
		types = doodad.Types,
		tools = doodad.Tools,
		mixins = doodad.MixIns,
		interfaces = doodad.Interfaces,
		extenders = doodad.Extenders,
		.... ;
```

## Scopes

  - **doodad.PUBLIC**: Accessible from the outside.
  - **doodad.PROTECTED**: Accessible from the inside only.
  - **doodad.PRIVATE**: Accessible only from the inside of the prototype. Can't be overriden or replaced.
  - **doodad.PROTECTED_DEBUG**: Like "doodad.PROTECTED", but will be "doodad.PUBLIC" on debug mode.
  - **doodad.PRIVATE_DEBUG**:  Like "doodad.PRIVATE", but will be "doodad.PUBLIC" on debug mode.

## Class Modifiers

  - **doodad.BASE**: The class is not ready for object instantiation and must be extended.
  - **doodad.INTERFACE**: The class defines an interface. https://en.wikipedia.org/wiki/Protocol_%28object-oriented_programming%29
  - **doodad.MIX_IN**: The class defines a Mix-in. https://en.wikipedia.org/wiki/Mixin
  - **doodad.TRAIT**: The class defines a Trait (currently implemented as "per convention", ie without validation). http://scg.unibe.ch/research/traits
  - **doodad.SEALED**: Objects instantiated from this class are sealed. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal
  - **doodad.STATIC**: The class do not allow instantiating.
  - **doodad.ISOLATED**: The class defines an isolated interface. This kind of interface makes the methods separated from the methods of its host class. To get access to them, you must call "getInterface".

## Attribute Modifiers :
  
  - **doodad.ATTRIBUTE**: Explicitly defines an attribute. Can be used to specify an extender, and/or extender options.
  - **doodad.OPTIONS**: Defines extender options.
  - **doodad.PRE_EXTEND**: Tells that an attribute must be extended before normal (non pre-extended) attributes.
  - **doodad.TYPE**: Attribute is accessible from its Type (ie class).
  - **doodad.INSTANCE**: Attribute is accessible from an instance of its Type (ie class).
  - **doodad.PERSISTENT**: Attribute is not deleted on destroy.
  - **doodad.READ_ONLY**: Attribute can't be modified.
  - **doodad.METHOD**: Explicitly defines an attribute as a method.
  - **doodad.JS_METHOD**: Defines an attribute as a "pure" Javascript function.
  - **doodad.PROPERTY**: Defines a property (with getter and setter).
  - **doodad.EVENT**: Defines an event attribute.
  - **doodad.ERROR_EVENT**: Defines an error event attribute.
  - (client-side only) **doodad.JS_EVENT**: Defines a DOM event attribute.
  - (server-side only) **doodad.NODE_EVENT**: Defines a Node.Js event attribute.

## Method Modifiers

  - **doodad.MUST_OVERRIDE**: The method must be overriden within another class.
  - **doodad.REPLACE**: The method's functions stack gets deleted and replaced by the new function.
  - **doodad.OVERRIDE**: The new function is appended to the method's functions stack.
  - **doodad.CREATE_REPLACE**: Same as "doodad.REPLACE", but the method will get created if it doesn't exist.
  - **doodad.CREATE_OVERRIDE**: Same as "doodad.OVERRIDE", but the method will get created if it doesn't exist. 
  - **doodad.OBSOLETE**: The method is obsolete and will write a warning on the "console" when called for the first time.
  - **doodad.CALL_FIRST**: Roughly, the function is prepend to the method's functions stack.
  - **doodad.CAN_BE_DESTROYED**: The method can be called even when the object has been destroyed.
  - **doodad.NOT_IMPLEMENTED**: The method exists, but it is not implemented until it will get overriden or replaced.
  - **doodad.RETURNS**: Specifies a validator to the method's returned value.
  - **doodad.SUPER**: For methods defined with "doodad.JS_METHOD", used to override a method.
  - **doodad.BIND**: Binds a method to its object.
  - **doodad.NOT_REENTRANT**: The method must exits before being able to call it again.
  - **doodad.EXTERNAL**: The method can't be called from inside the object.
  - **doodad.AFTER**: When combined with "doodad.OVERRIDE", the function will get inserted in the stack after the function of the specified class.
  - **doodad.BEFORE**: When combined with "doodad.OVERRIDE", the function will get inserted in the stack before the function of the specified class. 
  - **doodad.RENAME_OVERRIDE**: Like "doodad.OVERRIDE", but also renames the method. To be used when implementing a Trait.
  - **doodad.RENAME_REPLACE**: Like "doodad.REPLACE", but also renames the method. To be used when implementing a Trait.

## Available extenders

  - **extenders.Attribute**: (inherits 'extenders.Extender') Extends an attribute with a new value.
  - **extenders.Null**: (inherits 'extenders.Attribute') Extends an attribute with 'null'.
  - **extenders.ClonedAttribute**: (inherits 'extenders.Attribute') When an object gets instantiated, the attribute's value is cloned.
  - **extenders.ExtendObject**: (inherits 'extenders.ClonedAttribute') When overriden, the attribute's object value will get extended instead of replaced.
  - **extenders.UniqueArray**: (inherits 'extenders.ClonedAttribute') When overriden, the attribute's array value will get appended instead of replaced. Duplicates are removed.
  - **extenders.Method**: (inherits 'extenders.ClonedAttribute') Extends a method.
  - **extenders.JsMethod**: (inherits 'extenders.Method') Extends a Javascript method.
  - **extenders.Property**: (inherits 'extenders.Method') Extends a property.
  - **extenders.Event**: (inherits 'extenders.Method') Extends an event attribute.
  - (client-side only) **extenders.JsEvent**: (inherits 'extenders.Event') Extends a DOM event attribute.
  - (server-side only) **extenders.NodeEvent**: (inherits 'extenders.Event') Extends a Node.Js event attribute.

## Pre-built Interfaces and Mix-Ins

  - **interfaces.Clonable**: (interface) Makes a class clonable.
  - **interfaces.Serializable**: (interface) Makes a class serializable and desializable.
  - **mixins.Creatable**: (mix-in) Makes a class creatable.
  - **mixins.Translatable**: (mix-in) Makes a localized class object.
  - **mixins.Configurable**: (mix-in) Makes a configurable class object.
  - **mixins.Events**: (mix-in) Makes a class with events.
  - (client-side only) **mixins.JsEvents**: (mix-in) Makes a class with managed Javascript events.
  - (server-side only) **mixins.NodeEvents**: (mix-in) Makes a class with managed NodeJs events.
  
## Pre-built Classes

  - **doodad.Class**: (inherits 'Types.Type') The base of every classes.
  - **doodad.Object**: (inherits 'doodad.Class', implements 'Creatable') The base of every object classes.

## Pre-built Exceptions
  
  - **Error**: General error (alias to 'Types.Error').
  - **Application**: (inherits 'Error') Application error. An error with a title to be displayed to the end user. Exemple: "The selected customer is not allowed to buy the selected product."
  
## Namespaces Functions

  - **[namespace].REGISTER**: Registers a class in the namespace.
  - **[namespace].UNREGISTER**: Unregisters a class from the namespace.
  
## Examples

Example 1 (inheritance):
```js
    const Turtle1 = doodad.Object.$extend({
        $TYPE_NAME: 'Turtle1',

        talk: doodad.PUBLIC(function() {
            return "Hi !";
        }),
    })

    let turtle = new Turtle1();

    turtle.talk();

    const Turtle2 = Turtle1.$extend({
        $TYPE_NAME: 'Turtle2',

        talk: doodad.OVERRIDE(function() {
            return this._super() + " dOOOOdad";
        }),
    })

    turtle = new Turtle2();

    turtle.talk();
```

Example 2 (interfaces):
```js
    const Turtles = doodad.INTERFACE(doodad.Class.$extend({
        $TYPE_NAME: 'Turtles',

        talk: doodad.PUBLIC(doodad.METHOD()),
    }));

    const Turtle1 = doodad.Object.$extend(
                Turtles,
    {
        $TYPE_NAME: 'Turtle1',

        talk: doodad.OVERRIDE(function() {
            return "Hi";
        }),
    })

    const Turtle2 = doodad.Object.$extend(
                Turtles,
    {
        $TYPE_NAME: 'Turtle2',

        talk: doodad.OVERRIDE(function() {
            return "Bonjour";
        }),
    })

	types._implements(Turtle1, Turtles) && types._implements(Turtle2, Turtles);
```
Example 3 (mix-ins) :
```js
    const Turtles = doodad.MIX_IN(doodad.Class.$extend({
        $TYPE_NAME: 'Turtles',

        talk: doodad.PUBLIC(function() {
            return "Hi";
        }),
    }));

    const Turtle1 = doodad.Object.$extend(
                Turtles,
    {
        $TYPE_NAME: 'Turtle1',
    })
	
	types._implements(Turtle1, Turtles);
```

## Other available packages

  - **doodad-js-cluster**: Cluster manager (alpha)
  - **doodad-js-dates**: Dates formatting (release)
  - **doodad-js-http**: Http server (alpha)
  - **doodad-js-http_jsonrpc**: JSON-RPC over http server (alpha)
  - **doodad-js-io**: I/O module (alpha)
  - **doodad-js-ipc**: IPC/RPC server (alpha)
  - **doodad-js-loader**: Scripts loader (beta)
  - **doodad-js-locale**: Locales (release)
  - **doodad-js-make**: Make tools for doodad (alpha)
  - **doodad-js-mime**: Mime types (beta)
  - **doodad-js-minifiers**: Javascript minifier used by doodad (alpha)
  - **doodad-js-server**: Servers base module (alpha)
  - **doodad-js-templates**: HTML page templates (alpha)
  - **doodad-js-terminal**: Terminal (alpha)
  - **doodad-js-test**: Test application
  - **doodad-js-widgets**: Widgets base module (alpha)
  - **doodad-js-xml**: DOM XML parser (release)
  
## License

  [Apache-2.0][license-url]

[npm-image]: https://img.shields.io/npm/v/doodad-js.svg
[npm-url]: https://npmjs.org/package/doodad-js
[license-url]: http://opensource.org/licenses/Apache-2.0